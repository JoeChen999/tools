
printHelp()
{
	echo -e "Usage:\n\t./iosAutoBuild.sh Release|Dev|Payment|AdHoc GameVersion [SkipUnityExport]"
	echo -e "\nExample:\n\t./iosAutoBuild.sh Dev 10.0.1"
	echo -e "\t./iosAutoBuild.sh Payment 10.0.1 SkipUnityExport\n"
}

#START
if [ $# -lt 2 ];then
	printHelp
	exit
fi

case $1 in
	"Release")
		echo "Build Release..."
		source iosReleaseEnv.sh;;
	"Dev")
		echo "Build Dev..."
		source iosDevEnv.sh;;
	"Payment")
		echo "Build Payment..."
		source iosPaymentEnv.sh;;
	"AdHoc")
		echo "Build AdHoc..."
		source iosAdHocEnv.sh;;
	*)
		printHelp
		exit;;
esac

source iosGlobalEnv.sh
unityApp=/Applications/Unity/Unity.app/Contents/MacOS/Unity

#unity command line doesn't support relative project path
toolsPath=`pwd`;

cd ../../..
rootPath=`pwd`
cd ${toolsPath}

unityProjectPath="${rootPath}/client/Unity"
resourcesPath="${unityProjectPath}/Assets/Resources"
temp_xcode="${rootPath}/temp_xcode"
client_xcode="${rootPath}/client_xcode"
errorCode=0

#Update project from SVN
svnUpdate()
{
	svnUpdatePath ${rootPath}/art
	svnUpdatePath ${rootPath}/client
	svnUpdatePath ${rootPath}/client_xcode
	svnUpdatePath ${rootPath}/server
	svnUpdatePath ./iosAutoBuild.sh

}

svnUpdatePath()
{
	echo -e "\nsvn up $1"
	svn up $1
	
	errorCode=$?
	if [ $errorCode -ne 0 ];then 
		echo "svn update $1 error! Error code:$errorCode"
		exit
	fi
}

#unity export
unityExport(){

	#set build variable, output to file:BuildSetting.js
	if [ $1 = "Release" ] || [ $1 = "AdHoc" ];then
		debugMode=0
		buildMethodName="IOSReleaseBuild"
	else
		debugMode=1
		buildMethodName="IOSDevelopmentBuild"
	fi

	buildSettingFile=${unityProjectPath}/Assets/Script/Data/BuildSetting.js
	buildSettingContent="public	class	BuildSetting{\n
	\t	public	static	var	INTERNAL_VERSION:int = ${debugMode};\n
	\t	public	static	var	DEBUG_MODE:int = ${debugMode};\n
	\t	public	static	var	CLIENT_VERSION:String = \"$2\";\n
	}"
	echo -e "\nwriting BuildSetting.js..."
	echo -e ${buildSettingContent}>${buildSettingFile}

	#export project to client_xcode
	echo -e '\nExporting project...'

	#This step will generate a folder:${rootPath}/temp_xcode. And there is a pbxuser file in temp_xcode/Unity-iPhone.xcodeproj
	${unityApp} -quit -batchmode -projectPath $unityProjectPath -logFile ${toolsPath}/log.txt -executeMethod BuildProject.${buildMethodName}


	errorCode=$?
	if [ $errorCode -ne 0 ];then
		echo -e "\nUnity export project error! Error code:$errorCode"
		exit
	fi

	cp ${temp_xcode}/Info.plist ${client_xcode}/Info.plist
	cp ${temp_xcode}/*.png ${client_xcode}/
	cp ${temp_xcode}/Unity-iPhone.xcodeproj/*.pbxuser ${client_xcode}/Unity-iPhone.xcodeproj/
	
	rm -r ${client_xcode}/Data
	rm -r ${client_xcode}/Libraries
	cp -r ${temp_xcode}/Data ${client_xcode}/Data
	cp -r ${temp_xcode}/Libraries ${client_xcode}/Libraries
}

#update Game data.txt and supported luangage strings
gameDataUpdate()
{
	if [ $1 = "Release" ] || [ $1 = "AdHoc" ];then
                return
        fi

	echo -e "\nUpdate ${resourcesPath}/Data/d.txt..."
	curl -o ${resourcesPath}/Data/d.txt -d "gver=$2" -d ${DATA_DOWNLOAD_PARAMS}\
		http://${DATA_STR_SERVER}/ajax/upgrade.php
	
	errorCode=$?
	if [ $errorCode -ne 0 ];then
		echo -e "\nUpdate ${resourcesPath}/Data/d.txt error! Error code:$errorCode"
		exit
	fi
	

	echo -e "\nUpdate ${resourcesPath}/Data/building.txt..."
	curl -o ${resourcesPath}/Data/building.txt -d "gver=$2" -d ${GDS_BUILDING_DOWNLOAD_PARAMS}\
		http://${DATA_STR_SERVER}/ajax/gds.php
	
	errorCode=$?
	if [ $errorCode -ne 0 ];then
		echo -e "\nUpdate ${resourcesPath}/Data/building.txt error! Error code:$errorCode"
		exit
	fi
	
	
	echo -e "\nUpdate ${resourcesPath}/Data/troop.txt..."
	curl -o ${resourcesPath}/Data/troop.txt -d "gver=$2" -d ${GDS_TROOP_DOWNLOAD_PARAMS}\
		http://${DATA_STR_SERVER}/ajax/gds.php


	errorCode=$?
	if [ $errorCode -ne 0 ];then
		echo -e "\nUpdate ${resourcesPath}/Data/troop.txt error! Error code:$errorCode"
		exit
	fi
	
	echo -e "\n"
	IFS=','
	for language in ${SUPPORT_LANGUAGE};do
		echo -e "\nUpdate ${resourcesPath}/Data/s_${language}.txt..."
		curl -o ${resourcesPath}/Data/s_${language}.txt -d "language=${language}&gver=$2" -d ${STR_DOWNLOAD_PARAMS}\
			http://${DATA_STR_SERVER}/ajax/upgrade.php

		errorCode=$?
		if [ $errorCode -ne 0 ];then
			echo -e "\nUpdate ${resourcesPath}/Data/s_${language}.txt error! Error code:$errorCode"
			exit
		fi
	done
}


#following code for xcode

appPath="${client_xcode}/Build/$1/$2"
iosDeploymentTarget=4.3

changeInfoFile()
{
	
	#Prepare xcode build
	echo -e "\nChanging Info.plist..."

	infoFile=${client_xcode}/Info.plist
	echo -e "\n infofile:${infoFile}"
	plistBuddy="/usr/libexec/PlistBuddy"
	${plistBuddy} -c "Set :CFBundleVersion $2" ${infoFile}
	${plistBuddy} -c "Set :CFBundleIdentifier ${BUNDLE_NAME}" ${infoFile} 
	${plistBuddy} -c "Add :CFBundleShortVersionString string $2" ${infoFile}
	${plistBuddy} -c "Add :FacebookAppID string ${FACEBOOK_APP_ID}" ${infoFile}
	${plistBuddy} -c "Add :CFBundleURLTypes array" ${infoFile}
	${plistBuddy} -c "Add :CFBundleURLTypes:0 dict" ${infoFile}
	${plistBuddy} -c "Add :CFBundleURLTypes:0:CFBundleURLSchemes array" ${infoFile}
	${plistBuddy} -c "Add :CFBundleURLTypes:0:CFBundleURLSchemes:0 string fb${FACEBOOK_APP_ID}" ${infoFile}
	${plistBuddy} -c "Add :CFBundleIconFiles:0 string \"Icon-60.png\"" ${infoFile}
	${plistBuddy} -c "Add :CFBundleIconFiles:0 string \"Icon-120.png\"" ${infoFile}
	${plistBuddy} -c "Add :CFBundleIconFiles:0 string \"Icon-76.png\"" ${infoFile}
	${plistBuddy} -c "Add :CFBundleIconFiles:0 string \"Icon-152.png\"" ${infoFile}
	if [ -n ${URL_SCHEME} ];then
		${plistBuddy} -c "Add :CFBundleURLTypes:0:CFBundleURLSchemes:1 string ${URL_SCHEME}" ${infoFile}
	fi
	
	
	if [ $1 = "Release" ] || [ $1 = "AdHoc" ];then
		${plistBuddy} -c "Set :CFBundleDisplayName ${DISPLAY_NAME}" ${infoFile}
	else
		${plistBuddy} -c "Set :CFBundleDisplayName ${DISPLAY_NAME}_$1" ${infoFile}
	fi
}

changeInfoFileId(){
        infoFile=${client_xcode}/Info.plist
        plistBuddy="/usr/libexec/PlistBuddy"
        ${plistBuddy} -c "Set :CFBundleIdentifier ${BUNDLE_NAME}" ${infoFile}
	
	if [ $1 = "Release" ] || [ $1 = "AdHoc" ];then
                ${plistBuddy} -c "Set :CFBundleDisplayName ${DISPLAY_NAME}" ${infoFile}
        else
                ${plistBuddy} -c "Set :CFBundleDisplayName ${DISPLAY_NAME}_$1" ${infoFile}
        fi
}

xcodeBuildPrj()
{	

	echo -e "\nBuilding..."
	xcodebuild -project ${client_xcode}/Unity-iPhone.xcodeproj -target Unity-iPhone -configuration Release \
		"PRODUCT_NAME=${PRODUCT_NAME}" \
		"IPHONEOS_DEPLOYMENT_TARGET=${iosDeploymentTarget}" \
		"CODE_SIGN_IDENTITY=${CODE_SIGN_NAME}" \
		"CONFIGURATION_BUILD_DIR=${appPath}" \
		"PROVISIONING_PROFILE=${PROVISIONING_PROFILE}" \
		clean build

	errorCode=$?
	if [ $errorCode -ne 0 ];then
		echo -e "\nProject build error! Error code:$errorCode"
		exit
	fi
}

xcodeArchive()
{
	if [ $1 = "Release" ] || [ $1 = "AdHoc" ];then
		xcodebuild -project ${client_xcode}/Unity-iPhone.xcodeproj -scheme Unity-iPhone -configuration Release \
			"PRODUCT_NAME=${PRODUCT_NAME}" \
			"IPHONEOS_DEPLOYMENT_TARGET=${iosDeploymentTarget}" \
			"CODE_SIGN_IDENTITY=${CODE_SIGN_NAME}" \
			"CONFIGURATION_BUILD_DIR=${appPath}" \
			"PROVISIONING_PROFILE=${PROVISIONING_PROFILE}" \
			archive
		errorCode=$?
		if [ $errorCode -ne 0 ];then
			echo -e "\nProject archive error! Error code:$errorCode"
		fi
		exit
	fi
}

outputIPA()
{
	#The following code is only for dev
	echo -e "\nArchiving to ipa..."

	infoPlist=${PRODUCT_NAME}.plist
	infoPlistContent="<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n
	<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n
	<plist version=\"1.0\">\n
	<dict>\n
	\t	<key>items</key>\n
	\t	<array>\n
	\t\t		<dict>\n
	\t\t\t			<key>assets</key>\n
	\t\t\t			<array>\n
	\t\t\t\t			<dict>\n
	\t\t\t\t\t				<key>kind</key>\n
	\t\t\t\t\t				<string>software-package</string>\n
	\t\t\t\t\t				<key>url</key>\n
	\t\t\t\t\t				<string>__URL__</string>\n
	\t\t\t\t			</dict>\n
	\t\t\t			</array>\n
	\t\t\t			<key>metadata</key>\n
	\t\t\t			<dict>\n
	\t\t\t\t			<key>bundle-identifier</key>\n
	\t\t\t\t			<string>${BUNDLE_NAME}</string>\n
	\t\t\t\t			<key>bundle-version</key>\n
	\t\t\t\t			<string>$2</string>\n
	\t\t\t\t			<key>kind</key>\n
	\t\t\t\t			<string>software</string>\n
	\t\t\t\t			<key>title</key>\n
	\t\t\t\t			<string>${DISPLAY_NAME}_$2_$1</string>\n
	\t\t\t			</dict>\n
	\t\t		</dict>\n
	\t	</array>\n
	</dict>\n
	</plist>"
	echo -e ${infoPlistContent}>${appPath}/${infoPlist}

	#/usr/bin/xcrun -sdk iphoneos PackageApplication -v "${appPath}/${PRODUCT_NAME}.app" -o "${appPath}/${PRODUCT_NAME}.ipa" --sign "${DEVELOPPER_NAME}" --embed "${PROVISONING_PROFILE_PATH}"
	/usr/bin/xcrun -sdk iphoneos PackageApplication -v "${appPath}/${PRODUCT_NAME}.app" -o "${appPath}/${PRODUCT_NAME}.ipa" --sign "${CODE_SIGN_NAME}" 

	errorCode=$?
	if [ $errorCode -ne 0 ];then
		echo -e "\nArchive to ${PRODUCT_NAME}.ipa error! Error code:$errorCode\n"
		exit
	else
		echo -e "\nArchive Success!\nFind ${PRODUCT_NAME}.ipa in\n\t ${appPath}\n"
	fi
}
main()
{
	if [ $# -lt 3 ] || [ $3 != "SkipUnityExport" ];then
		svnUpdate
		gameDataUpdate $1 $2
		unityExport $1 $2
		changeInfoFile $1 $2
	elif [ $3 = "SkipUnityExport" ];then
                changeInfoFileId $1 $2
	fi

	xcodeBuildPrj $1 $2
	xcodeArchive $1 $2
	outputIPA $1 $2
}

main $1 $2 $3

